#############
# DESCRIPTION
#############

# [DS]: default state
# [FS]: final state
# [CS]: concurrent state
# [OTT]: once timed transition
# [RTT]: repeated timed transition

# S: source
# N: destination
# E: event
# O: commands
# C: condition
# T: timed transition

#################
# DESCRIPTION END
#################

INITIALIZER:
    from Tkinter import *
    from DWatchGUI import DWatchGUI
    debugger.InterruptEvent('GUI Debug')

    root = Tk()
    root.title('A lovely watch')
    g = DWatchGUI(root, eventhandler)

    eventhandler.start()

    root.mainloop()
    exit()

STATECHART:
    Initial[DS]
    Started
      Time[CS][DS]
        TimeDisplay[CS][DS]
        TimeEdit[CS]
      Alarm[CS][DS]
        AlarmDisplay[DS]
        AlarmEdit
      Chrono[CS][DS]
        ChronoStopped[DS]
        ChronoRunning
      Light[CS][DS]
        Off[DS][CS]
        On[DS][CS]

TRANSITION:
    S: Initial
    N: Started.Time.TimeDisplay
    T: 1 [OTT]
    O: g.setActiveMode('time')
       [DUMP('start The Time')]

#######
# LIGHT
#######

TRANSITION:
    S: Started.Light.Off
    N: Started.Light.On
    E: lightOn
    O: g.setIndiglo()

TRANSITION:
    S: Started.Light.On
    N: Started.Light.Off
    E: lightOff
    O: g.unsetIndiglo()

###########
# LIGHT END
###########

##################
# TIME TRANSITIONS
##################

# Generic one second interval
TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Time.TimeDisplay
    T: 1  # by default, it is [RTT]

# The Time
ENTER:
    N: Started.Time.TimeDisplay
    C: g.getActiveMode() is not 'timeEdit'
    O: g.increaseTimeByOne()

# Draw The Time
ENTER:
    N: Started.Time.TimeDisplay
    C: g.getActiveMode() is 'time'
    O: g.refreshTimeDisplay()

# Chrono running in the background
ENTER:
    N: Started.Time.TimeDisplay
    C: g.getActiveMode() is not 'chrono' and g.getChrono()
    O: g.increaseChronoByOne()

# Chrono is running in the foreground
ENTER:
    N: Started.Time.TimeDisplay
    C: g.getActiveMode() is 'chrono' and g.getChrono() is True
    O: g.increaseChronoByOne()
       g.refreshChronoDisplay()

# From time display to time edit
TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Time.TimeEdit
    E: editTime
    C: g.getActiveMode() is 'time'
    O: g.setActiveMode('timeEdit')
       g.startSelection()
       g.setToEditTimeInProgress(True)

# From time edit to time display
TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeDisplay
    E: finishEdit
    C: g.getActiveMode() is 'timeEdit' and not g.getToEditTimeInProgress()
    O: g.setActiveMode('time')
       g.stopSelection()
       g.endAutoFinishEditTimeTimer()

# Select next digit group
TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: selectNext
    C: g.getActiveMode() is 'timeEdit'
    O: g.selectNext()
       g.endAutoFinishEditTimeTimer()

# Increases the currently selected digit group's value by one
TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: increase
    C: g.getActiveMode() is 'timeEdit'
    O: g.increaseSelection()
       g.endAutoFinishEditTimeTimer()

# Auto increase the currently selected digit group's value by one
TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    C: g.getActiveMode() is 'timeEdit' and g.getIncreasePressed() is True
    T: 0.3 [RTT]
    O: g.increaseSelection()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: released
    C: g.getActiveMode() is 'timeEdit'
    O: g.setToEditTimeInProgress(False)
       g.startAutoFinishEditTimeTimer()
       g.endFinishEditTimeTimer()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: bottomLeftReleased
    C: g.getActiveMode() is 'timeEdit'
    O: g.startAutoFinishEditTimeTimer()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: topLeftReleased
    C: g.getActiveMode() is 'timeEdit'
    O: g.startAutoFinishEditTimeTimer()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: bottomRightPressed
    C: g.getActiveMode() is 'timeEdit'
    O: g.endAutoFinishEditTimeTimer()

######################
# TIME TRANSITIONS END
######################

###################
# ALARM TRANSITIONS
###################

# Change mode from time to Alarm
TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Alarm.AlarmDisplay
    E: setAlarm
    C: g.getActiveMode() is 'time'
    O: g.setActiveMode('alarm')
       g.refreshAlarmDisplay()
       [DUMP('change mode from time to alarm')]

# From alarm display to alarm edit
TRANSITION:
    S: Started.Alarm.AlarmDisplay
    N: Started.Alarm.AlarmEdit
    E: editAlarm
    C: g.getActiveMode() is 'alarm'
    O: g.setActiveMode('alarmEdit')
       g.startSelection()
       [DUMP('change mode from alarm display to alarm edit')]

# From alarm to time display
TRANSITION:
    S: Started.Alarm
    N: Started.Time.TimeDisplay
    E: finishAlarmMode
    C: g.getActiveMode() is 'alarm' or g.getActiveMode() is 'alarmEdit'
    O: g.setActiveMode('time')
       g.endAutoFinishAlarmModeTimer()
       g.stopSelection()
       [DUMP('change mode from alarm to time')]

# Increase
TRANSITION:
    S: Started.Alarm.AlarmEdit
    N: Started.Alarm.AlarmEdit
    E: increase
    C: g.getActiveMode() is 'alarmEdit'
    O: g.increaseSelection()
       [DUMP('Increase')]

# Auto increase
TRANSITION:
    S: Started.Alarm.AlarmEdit
    N: Started.Alarm.AlarmEdit
    C: g.getActiveMode() is 'alarmEdit' and g.getIncreasePressed() is True
    T: 0.3 [RTT]
    O: g.increaseSelection()
       [DUMP('Increase')]

# Top left press, select next
TRANSITION:
    S: Started.Alarm.AlarmEdit
    N: Started.Alarm.AlarmEdit
    E: selectNext
    C: g.getActiveMode() is 'alarmEdit'
    O: g.endAutoFinishAlarmModeTimer()
       g.selectNext()
       [DUMP('Alarm: top left press, end auto end timer, select next')]

# Bottom left press
TRANSITION:
    S: Started.Alarm.AlarmDisplay
    N: Started.Alarm.AlarmDisplay
    E: setAlarm
    C: g.getActiveMode() is 'alarm'
    O: g.endAutoFinishAlarmModeTimer()
       g.maybeEditAlarm()
       g.setAlarm()
       [DUMP('Alarm: bottom left press, end auto end timer, start to edit mode timer, set alarm')]

TRANSITION:
    S: Started.Alarm.AlarmEdit
    N: Started.Alarm.AlarmEdit
    E: setAlarm
    C: g.getActiveMode() is 'alarmEdit'
    O: g.endAutoFinishAlarmModeTimer()
       [DUMP('Alarm: bottom left press, end auto end timer, start to edit mode timer')]

# Bottom right press
TRANSITION:
    S: Started.Alarm.AlarmDisplay
    N: Started.Alarm.AlarmDisplay
    E: bottomRightPressed
    C: g.getActiveMode() is 'alarm'
    O: g.endAutoFinishAlarmModeTimer()
       g.maybeFinishAlarmMode()
       [DUMP('Alarm: bottom right press, end auto end timer, start close on press timer')]

TRANSITION:
    S: Started.Alarm.AlarmEdit
    N: Started.Alarm.AlarmEdit
    E: bottomRightPressed
    C: g.getActiveMode() is 'alarmEdit'
    O: g.endAutoFinishAlarmModeTimer()
       g.maybeFinishAlarmMode()
       [DUMP('Alarm: bottom right press, end auto end timer, start close on press timer')]

# Top left release
TRANSITION:
    S: Started.Alarm.AlarmEdit
    N: Started.Alarm.AlarmEdit
    E: topLeftReleased
    C: g.getActiveMode() is 'alarmEdit'
    O: g.startAutoFinishAlarmModeTimer()
       [DUMP('Alarm: top left release, start auto end timer')]

# Bottom left release
TRANSITION:
    S: Started.Alarm.AlarmDisplay
    N: Started.Alarm.AlarmDisplay
    E: bottomLeftReleased
    C: g.getActiveMode() is 'alarm'
    O: g.startAutoFinishAlarmModeTimer()
       [DUMP('Alarm: bottom left release, start auto end timer')]

TRANSITION:
    S: Started.Alarm.AlarmEdit
    N: Started.Alarm.AlarmEdit
    E: bottomLeftReleased
    C: g.getActiveMode() is 'alarmEdit'
    O: g.startAutoFinishAlarmModeTimer()
       [DUMP('Alarm: bottom left release, start auto end timer')]

# Bottom right release
TRANSITION:
    S: Started.Alarm.AlarmDisplay
    N: Started.Alarm.AlarmDisplay
    E: released
    C: g.getActiveMode() is 'alarm'
    O: g.startAutoFinishAlarmModeTimer()
       [DUMP('Alarm: bottom right release, start auto end timer')]

TRANSITION:
    S: Started.Alarm.AlarmEdit
    N: Started.Alarm.AlarmEdit
    E: released
    C: g.getActiveMode() is 'alarmEdit'
    O: g.startAutoFinishAlarmModeTimer()
       [DUMP('Alarm: bottom right release, start auto end timer')]

#######################
# ALARM TRANSITIONS END
#######################

####################
# CHRONO TRANSITIONS
####################

# Change mode from time to stopped chrono
TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Chrono.ChronoStopped
    E: changeMode
    C: g.getChrono() is False and [PARAMS] is 'time'
    O: g.setActiveMode('chrono')
       g.refreshChronoDisplay()
       [DUMP('change mode from time to chrono')]

# Change mode from time to running chrono
TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Chrono.ChronoRunning
    E: changeMode
    C: g.getChrono() is True and [PARAMS] is 'time'
    O: g.setActiveMode('chrono')
       g.refreshChronoDisplay()
       [DUMP('change mode from time to chrono')]

# Start chrono with bottom right button
TRANSITION:
    S: Started.Chrono.ChronoStopped
    N: Started.Chrono.ChronoRunning
    E: initChrono
    C: g.getActiveMode() is 'chrono'
    O: g.setChrono(True)

# Stop chrono with bottom right button
TRANSITION:
    S: Started.Chrono.ChronoRunning
    N: Started.Chrono.ChronoStopped
    E: initChrono
    C: g.getActiveMode() is 'chrono'
    O: g.setChrono(False)

# Reset chrono with bottom left button
TRANSITION:
    S: Started.Chrono.ChronoStopped
    N: Started.Chrono.ChronoStopped
    E: resetChrono
    C: g.getActiveMode() is 'chrono'
    O: g.resetChrono()
       g.refreshChronoDisplay()

# Reset chrono with bottom left button
TRANSITION:
    S: Started.Chrono.ChronoRunning
    N: Started.Chrono.ChronoRunning
    C: g.getActiveMode() is 'chrono'
    E: resetChrono
    O: g.resetChrono()
       g.refreshChronoDisplay()

# Change mode from stopped chrono to time
TRANSITION:
    S: Started.Chrono.ChronoStopped
    N: Started.Time.TimeDisplay
    E: changeMode
    C: [PARAMS] is 'chrono'
    O: g.setActiveMode('time')
       [DUMP('change mode from chrono to time')]

# Change mode from running chrono to time
TRANSITION:
    S: Started.Chrono.ChronoRunning
    N: Started.Time.TimeDisplay
    E: changeMode
    C: [PARAMS] is 'chrono'
    O: g.setActiveMode('time')
       [DUMP('change mode from chrono to time')]

########################
# CHRONO TRANSITIONS END
########################
