#############
# DESCRIPTION
#############

# [DS]: default state
# [FS]: final state
# [CS]: concurrent state
# [OTT]: once timed transition
# [RTT]: repeated timed transition

# S: source
# N: destination
# E: event
# O: commands
# C: condition
# T: timed transition

#################
# DESCRIPTION END
#################

INITIALIZER:
    from Tkinter import *
    from DWatchGUI import DWatchGUI
    debugger.InterruptEvent('GUI Debug')

    root = Tk()
    root.title("A lovely watch")
    g = DWatchGUI(root, eventhandler)

    eventhandler.start()

    root.mainloop()
    exit()

STATECHART:
    Initial[DS]
    Started
      Time[CS][DS]
        TimeDisplay[DS]
        TimeEdit
      Alarm[CS][DS]
        AlarmDisplay[DS]
        AlarmEdit
      Chrono[CS][DS]
        ChronoStopped[DS]
        ChronoRunning
      Light[CS][DS]
        Off[DS][CS]
        On[DS][CS]

TRANSITION:
    S: Initial
    N: Started.Time.TimeDisplay
    T: 1 [OTT]
    O: [DUMP("start The Time")]
       g.setActiveMode('time')

#######
# LIGHT
#######

TRANSITION:
    S: Started.Light.Off
    N: Started.Light.On
    E: lightOn
    O: g.setIndiglo()

TRANSITION:
    S: Started.Light.On
    N: Started.Light.Off
    E: lightOff
    O: g.unsetIndiglo()

###########
# LIGHT END
###########

##################
# TIME TRANSITIONS
##################

TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Time.TimeDisplay
    T: 1  # by default, it is [RTT]
    O: g.increaseTimeByOne()

ENTER:
    N: Started.Time.TimeDisplay
    C: g.getActiveMode() is 'time'
    O: g.refreshTimeDisplay()

TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Time.TimeEdit
    E: editTime
    O: g.startSelection()
       g.setToEditTimeInProgress(True)

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: released
    O: g.setToEditTimeInProgress(False)
       g.startAutoFinishEditTimeTimer()
       g.endFinishEditTimeTimer()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: bottomLeftReleased
    O: g.startAutoFinishEditTimeTimer()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: topLeftReleased
    O: g.startAutoFinishEditTimeTimer()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: selectNext
    O: g.selectNext()
       g.endAutoFinishEditTimeTimer()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: increase
    O: g.increaseSelection()
       g.endAutoFinishEditTimeTimer()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    C: g.getIncreasePressed()
    T: 0.3 [RTT]
    O: g.increaseSelection()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeEdit
    E: bottomRightPressed
    O: g.endAutoFinishEditTimeTimer()

TRANSITION:
    S: Started.Time.TimeEdit
    N: Started.Time.TimeDisplay
    E: finishEdit
    C: not g.getToEditTimeInProgress()
    O: g.stopSelection()
       g.endAutoFinishEditTimeTimer()

######################
# TIME TRANSITIONS END
######################

###################
# ALARM TRANSITIONS
###################

### change mode from time to Alarm
ENTER:
    N: Started.Alarm
    C: g.getActiveMode() is 'time'
    O: g.refreshAlarmDisplay()

TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Alarm.AlarmDisplay
    E: activateAlarm
    O: g.refreshAlarmDisplay()

#######################
# ALARM TRANSITIONS END
#######################

####################
# CHRONO TRANSITIONS
####################

### change mode from time to stopped chrono
TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Chrono.ChronoStopped
    E: changeMode
    C: g.getChrono() is False
    O: g.refreshChronoDisplay()
       g.setActiveMode('chrono')
       [DUMP("change mode from time to chrono")]

### change mode from time to running chrono
TRANSITION:
    S: Started.Time.TimeDisplay
    N: Started.Chrono.ChronoRunning
    E: changeMode
    C: g.getChrono() is True
    O: g.refreshChronoDisplay()
       g.setActiveMode('chrono')
       [DUMP("change mode from time to chrono")]

### start chrono with bottom right button
TRANSITION:
    S: Started.Chrono.ChronoStopped
    N: Started.Chrono.ChronoRunning
    E: initChrono
    O: g.setChrono(True)

### stop chrono with bottom right button
TRANSITION:
    S: Started.Chrono.ChronoRunning
    N: Started.Chrono.ChronoStopped
    E: initChrono
    O: g.setChrono(False)

### reset chrono with bottom left button
TRANSITION:
    S: Started.Chrono.ChronoStopped
    N: Started.Chrono.ChronoStopped
    E: resetChrono
    C: g.getActiveMode() is 'chrono'
    O: g.resetChrono()
       g.refreshChronoDisplay()

### reset chrono with bottom left button
TRANSITION:
    S: Started.Chrono.ChronoRunning
    N: Started.Chrono.ChronoRunning
    C: g.getActiveMode() is 'chrono'
    E: resetChrono
    O: g.resetChrono()
       g.refreshChronoDisplay()

### change mode from stopped chrono to time
TRANSITION:
    S: Started.Chrono.ChronoStopped
    N: Started.Time.TimeDisplay
    E: changeMode
    C: [PARAMS] is 'chrono'
    O: [DUMP("change mode from chrono to time")]
       g.setActiveMode('time')

### change mode from running chrono to time
TRANSITION:
    S: Started.Chrono.ChronoRunning
    N: Started.Time.TimeDisplay
    E: changeMode
    C: [PARAMS] is 'chrono'
    O: [DUMP("change mode from chrono to time")]
       g.setActiveMode('time')

### chrono running in the background
ENTER:
    N: Started.Time.TimeDisplay
    C: g.getActiveMode() is 'time' and g.getChrono()
    O: g.increaseChronoByOne()

### chrono is running
ENTER:
    N: Started.Time.TimeDisplay
    C: g.getActiveMode() is 'chrono' and g.getChrono() is True
    O: g.increaseChronoByOne()
       g.refreshChronoDisplay()

########################
# CHRONO TRANSITIONS END
########################
